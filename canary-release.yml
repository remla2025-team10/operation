apiVersion: v1
kind: Pod
metadata:
  name: model-v1
  labels:
    app: model-service
    version: v1
spec:
  containers:
  - name: model-service
    image: ghcr.io/remla2025-team10/model-service:v0.0.5
    ports:
    - containerPort: 3000
    env:
    - name: PORT
      value: "3000"
    volumeMounts:
    - name: model-volume
      mountPath: /model-service/models
  volumes:
  - name: model-volume
    hostPath:
      path: ./
      type: Directory
---
apiVersion: v1
kind: Pod
metadata:
  name: model-v2
  labels:
    app: model-service
    version: v2
spec:
  containers:
  - name: model-service
    image: ghcr.io/remla2025-team10/model-service:v0.0.5   # Newer canary image version
    ports:
    - containerPort: 3000
    env:
    - name: PORT
      value: "3000"
    volumeMounts:
    - name: model-volume
      mountPath: /model-service/models
  volumes:
  - name: model-volume
    hostPath:
      path: ./
      type: Directory
---
apiVersion: v1
kind: Pod
metadata:
  name: app-v1
  labels:
    app: app-service
    version: v1
spec:
  containers:
  - name: app
    image: ghcr.io/remla2025-team10/app-service:v0.5.2
    ports:
    - containerPort: 8080
    env:
    - name: PORT
      value: "8080"
    - name: MODEL_SERVICE_URL
      value: "http://model-service:3000"
---
apiVersion: v1
kind: Pod
metadata:
  name: app-v2
  labels:
    app: app-service
    version: v2
spec:
  containers:
  - name: app
    image: ghcr.io/remla2025-team10/app-service:v0.7.0   # Newer canary image version
    ports:
    - containerPort: 8080
    env:
    - name: PORT
      value: "8080"
    - name: MODEL_SERVICE_URL
      value: "http://model-service:3000"
---
apiVersion: v1
kind: Service
metadata:
  name: model-service
spec:
  selector:
    app: model-service
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  selector:
    app: app-service
  ports:
  - name: http
    port: 1234
    targetPort: 8080
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: my-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: model-service-dr
spec:
  host: model-service
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: app-dr
spec:
  host: app
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: prometheus-vs
spec:
  gateways:
  - my-gateway
  hosts:
  - "prometheus.local"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: prometheus.istio-system.svc.cluster.local
        port:
          number: 9090
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-vs
spec:
  gateways:
  - my-gateway
  hosts:
  - "kiali.local"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: kiali.istio-system.svc.cluster.local
        port:
          number: 20001
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: app-vs
spec:
  gateways:
  - my-gateway
  hosts:
  - "app.local"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app
        subset: v1
      weight: 90
    - destination:
        host: app
        subset: v2
      weight: 10
---

# Enable consistency
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: model-service-vs
spec:
  hosts:
  - model-service
  http:
  - match:
    - sourceLabels:
        version: v2
    route:
    - destination:
        host: model-service
        subset: v2
  - route:  # default route
    - destination:
        host: model-service
        subset: v1




# Kubernetes Dashboard + Self Signed Certificate
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: dashboard-gateway
  namespace: kubernetes-dashboard
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: dashboard-cert
    hosts:
    - dashboard.example.com
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  hosts:
  - dashboard.example.com
  gateways:
  - dashboard-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: kubernetes-dashboard-web.kubernetes-dashboard.svc.cluster.local
            port:
              number: 8000
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: istio-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dashboard-cert
  namespace: istio-system
spec:
  secretName: dashboard-cert
  duration: 8760h # 1 year
  commonName: dashboard.example.com
  dnsNames:
  - dashboard.example.com
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
