- name: Finalizing Cluster Setup
  hosts: all
  become: true
  vars:
    istio_version: "1.22.0"  # You can update this version as needed
    istio_install_dir: "/opt/istio"

  tasks:
    ########## Install Istio ##########
    - name: Ensure curl is installed
      apt:
        name: curl
        state: present
        update_cache: yes

    - name: Create Istio install directory
      file:
        path: "{{ istio_install_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Set architecture fact
      set_fact:
        istio_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

    - name: Download Istio
      get_url:
        url: "https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-{{ istio_arch }}.tar.gz"
        dest: "/tmp/istio-{{ istio_version }}.tar.gz"
        mode: '0644'

    - name: Extract Istio archive
      unarchive:
        src: "/tmp/istio-{{ istio_version }}.tar.gz"
        dest: "{{ istio_install_dir }}"
        remote_src: yes

    - name: Move istioctl to /usr/local/bin
      copy:
        src: "{{ istio_install_dir }}/istio-{{ istio_version }}/bin/istioctl"
        dest: /usr/local/bin/istioctl
        mode: '0755'
        remote_src: yes

    - name: Verify istioctl version
      command: istioctl version
      register: istioctl_output
      changed_when: false

    - name: Print istioctl version
      debug:
        var: istioctl_output.stdout

    - name: Install Istio with default profile
      command: istioctl install --set profile=default -y
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Wait for istio-system pods to be ready
      shell: |
        kubectl wait --for=condition=ready pod -l app=istiod -n istio-system --timeout=180s
        kubectl wait --for=condition=ready pod -l istio=ingressgateway -n istio-system --timeout=180s
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Label default namespace for automatic sidecar injection
      command: kubectl label namespace default istio-injection=enabled --overwrite
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Label kubernetes-dashboard namespace for automatic sidecar injection
      command: kubectl label namespace default istio-injection=enabled --overwrite
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf


    - name: Deploy Prometheus addon
      command: kubectl apply -f {{ istio_install_dir }}/istio-{{ istio_version }}/samples/addons/prometheus.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Deploy Jaeger addon
      command: kubectl apply -f {{ istio_install_dir }}/istio-{{ istio_version }}/samples/addons/jaeger.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Deploy Kiali addon
      command: kubectl apply -f {{ istio_install_dir }}/istio-{{ istio_version }}/samples/addons/kiali.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Deploy Grafana addon
      command: kubectl apply -f {{ istio_install_dir }}/istio-{{ istio_version }}/samples/addons/grafana.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Wait for addons to be ready
      shell: |
        kubectl wait --for=condition=ready pod -l app=prometheus -n istio-system --timeout=120s
        kubectl wait --for=condition=ready pod -l app=jaeger -n istio-system --timeout=120s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kiali -n istio-system --timeout=120s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n istio-system --timeout=120s
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf


    ########## Install MetalLB ##########
    - name: Copy MetalLB to VM
      copy:
        src: ansible/files/metallb-native.yaml
        dest: /tmp/metallb-native.yaml
        mode: '0644'

    - name: Install MetalLB
      become_user: vagrant
      shell: kubectl apply -f /tmp/metallb-native.yaml


    - name: Wait for all MetalLB pods to be ready
      become_user: vagrant
      shell: |
        kubectl wait \
          --for=condition=ready pod \
          --all \
          -n metallb-system \
          --timeout=120s

    - name: Add IPAddressPool
      copy:
        dest: /etc/kubernetes/ip-address-pool.yaml
        content: |
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: ip-address-pool
            namespace: metallb-system
          spec:
            addresses:
            - 192.168.56.90-192.168.56.99

    - name: Apply IPAddressPool
      become_user: vagrant
      shell: |
        kubectl apply -f /etc/kubernetes/ip-address-pool.yaml

    - name: Configure L2Advertisement
      copy:
        dest: /etc/kubernetes/l2-advertisement.yaml
        content: |
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-advertisement
            namespace: metallb-system

    - name: Apply L2Advertisement
      become_user: vagrant
      shell:
        kubectl apply -f /etc/kubernetes/l2-advertisement.yaml

    - name: Wait for MetalLB
      become_user: vagrant
      shell: |
        kubectl wait -n metallb-system -l app=metallb,component=controller --for=condition=ready pod --timeout=60s

    - name: Add Kubernetes Dashboard repository
      become_user: vagrant
      shell: |
        helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
    - name: Install Kubernetes Dashboard
      become_user: vagrant
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        release_namespace: kubernetes-dashboard
        create_namespace: true

    - name: Copy Dashboard Manifest to VM
      copy:
        src: kubernetes-dashboard/dashboard-adminuser.yaml
        dest: /tmp/dashboard-adminuser.yaml
        mode: '0644'

    - name: Create Admin User
      become_user: vagrant
      shell: kubectl apply -f /tmp/dashboard-adminuser.yaml


    # Install Cert-Manager
    - name: Install cert-manager with kubeconfig
      command: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
      environment:
        KUBECONFIG: /home/vagrant/.kube/config

    - name: Wait for all cert-manager pods to be ready
      become_user: vagrant
      shell: |
        kubectl wait \
          --for=condition=ready pod \
          --all \
          -n cert-manager \
          --timeout=180s

    # Apply canary release
    - name: Copy canary file
      copy:
        src: canary-release.yml
        dest: /tmp/canary-release.yml
        mode: '0644'

    - name: Apply Canary Release
      become_user: vagrant
      shell: kubectl apply -f /tmp/canary-release.yml


    - name: Generate Kubernetes Dashboard admin token
      become: true
      shell: |
        kubectl -n kubernetes-dashboard create token admin-user
      register: dashboard_token
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Save dashboard token to a temp file on the VM
      become: true
      copy:
        content: "{{ dashboard_token.stdout }}"
        dest: /tmp/k8s_dashboard_admin_token.txt
        mode: '0600'

    - name: Fetch dashboard token back to the Ansible controller
      fetch:
        src: /tmp/k8s_dashboard_admin_token.txt
        dest: "{{ playbook_dir }}/dashboard-admin-token.txt"
        flat: yes

    ########## Install and Configure Grafana Dashboard ##########
    - name: Create directory for Grafana dashboard
      file:
        path: /tmp/grafana-dashboards
        state: directory
        mode: '0755'

    - name: Copy Grafana dashboard JSON to control node
      copy:
        src: grafana-dashboard.json
        dest: /tmp/grafana-dashboards/ab-testing-dashboard.json
        mode: '0644'

    - name: Create ConfigMap for Grafana dashboard
      become_user: vagrant
      shell: |
        kubectl create configmap ab-testing-dashboard -n istio-system --from-file=/tmp/grafana-dashboards/ab-testing-dashboard.json || \
        kubectl create configmap ab-testing-dashboard -n istio-system --from-file=/tmp/grafana-dashboards/ab-testing-dashboard.json -o yaml --dry-run=client | kubectl apply -f -
        kubectl label configmap ab-testing-dashboard -n istio-system grafana_dashboard=1

    - name: Wait for Grafana to load dashboard
      become_user: vagrant
      shell: |
        kubectl -n istio-system rollout restart deployment grafana
        kubectl -n istio-system rollout status deployment grafana --timeout=120s