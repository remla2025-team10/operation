---
- hosts: all
  become: true
  tasks:

    ########### Install Required Packages ###########
    # Set timezone (Amsterdam)
    - name: Set timezone
      timezone:
        name: Europe/Amsterdam

    ########### Secret Key Authentication ###########
    - name: Ensure .ssh directory exists
      file:
        path: /home/vagrant/.ssh
        state: directory
        mode: '0700'
        owner: vagrant
        group: vagrant

    - name: Add SSH public keys for passwordless authentication
      authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', item) }}"
      with_fileglob:
        - "{{ playbook_dir }}/ssh_keys/*.pub"
      
    - name: Ensure SSH service is running
      service:
        name: ssh
        state: started
        enabled: yes
        
    - name: Enable SSH public key authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
      notify: Restart SSH


    ########### System Configuration ###########
    # Dynamic hosts file management
    - name: Update /etc/hosts with cluster nodes
      blockinfile:
        path: /etc/hosts
        backup: yes
        block: |
          # Kubernetes Cluster Nodes - Auto Generated
          192.168.56.100 ctrl
          {% for i in range(1, worker_count|int + 1) %}
          192.168.56.{{ i + 100 }} node-{{ i }}
          {% endfor %}
        marker: "# {mark} KUBERNETES CLUSTER NODES"

    ## For Kubernetes ##
    # Disable swap
    - name: Disable swap (Step 5-1)
      command: swapoff -a
      
    - name: Remove swap entry from /etc/fstab (Step 5-2)
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        state: absent
        
    # Set up kernel configurations
    - name: Load required kernel modules (Step 6.1)
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Load br_netfilter kernel module (Step 6.2)
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter is loaded on boot (Step 6.3)
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter
        owner: root
        group: root
        mode: '0644'
        
    - name: Setup required sysctl params (Step 7)
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { key: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
        - { key: "net.ipv4.ip_forward", value: "1" }

    - name: Apply sysctl params without reboot
      become: true
      shell: sysctl --system

    - name: Generate /etc/hosts dynamically for worker nodes (Step 8)
      blockinfile:
        path: /etc/hosts
        block: |
          {% for i in range(1, worker_count + 1) %}
          node-{{ i }} 192.168.56.{{ 100 + i }}
          {% endfor %}
        create: yes
        owner: root
        group: root
        mode: '0644'

    - name: Add Kubernetes GPG key (Step 9)
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      become: yes

    - name: Add Kubernetes APT repository (Step 9.1)
      apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'
        state: present
        filename: kubernetes
      become: yes

    - name: Update apt cache (Step 9.2)
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    ########### Install containerd and runc ########### (Step 10)
    # containerd
    - name: Install containerd (1.7.24)
      apt:
        name: containerd=1.7.24*
        state: present
        update_cache: yes

    - name: Install runc (1.1.12)
      apt:
        name: runc
        state: present
        update_cache: yes

    - name: Install kubeadm (1.32.4)
      apt:
        name: kubeadm=1.32.4*
        state: present
        update_cache: yes

    - name: Install kubelet (1.32.4)
      apt:
        name: kubelet=1.32.4*
        state: present
        update_cache: yes

    - name: Install kubectl (1.32.4)
      apt:
        name: kubectl=1.32.4*
        state: present
        update_cache: yes

    ## Configure containerd (Step 11) ##
    - name: Create containerd directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Configure SystemdCgroup in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '(\s+)SystemdCgroup = false'
        line: '\1SystemdCgroup = true'
        backrefs: yes

    - name: Ensure CRI plugin is not disabled in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'disabled_plugins = \["cri"\]'
        state: absent

    - name: Disable AppArmor in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '(\s+)# disable_apparmor = false'
        line: '\1disable_apparmor = true'
        backrefs: yes
      
    - name: Update sandbox image version to 3.10
      replace:
        path: /etc/containerd/config.toml
        regexp: '(\s+)sandbox_image = ".*"'
        replace: '\1sandbox_image = "registry.k8s.io/pause:3.10"'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
        enabled: yes

    - name: Hold Kubernetes packages at installed version
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable the Kubelet service (Step 12)
      service:
        name: kubelet
        enabled: yes
  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted
